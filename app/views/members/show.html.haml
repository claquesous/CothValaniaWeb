%h1.valigned= @member.name
.pull-right
  - if admin? || @member == current_member
    = link_to 'Edit', edit_member_path(@member), class: "btn btn-info"
  = link_to 'Back', members_path, class: "btn btn-primary"

%p
  %b Join date:
  = @member.join_date
%p
  %b Points:
  = @member.points
%p
  %b Url:
  = @member.url
%p
  %b Remarks:
  = @member.remarks
%p
  %b Active:
  = @member.active
%p
  %b Admin:
  = @member.admin
%p
  %b Leader:
  = @member.leader
%p
  %b Reward cycle:
  = @member.reward_cycle
%p
  %b Cycle date:
  = @member.cycle_date

%p#character_list
  %b Characters
  %table.table.table-condensed
    %tr
      %th Name
      %th Points
      %th Remarks
      %th Sex
      %th #{@config.races.singularize}
      - @jobs.each do |j|
        %th= j.name
    - @member.characters.includes(:race).includes(:member).each do |c|
      %tr
        %td= c.name
        %td= c.current_points
        %td= c.remarks
        %td= c.sex
        %td= c.race.try :name
        - @jobs.each do |j|
          %td
            -if c.jobs.include?(j)
              %i.icon-ok

.row
  .span5 
    %p#attendance_list
      = render 'attendance_list', attendances: @member.event_attendances.order_by_date.limit(10)
      = link_to 'See all attendance', attendances_member_path(@member)

    %p
      %b Attendance rate:
      = @member.attendance_rate.round(2)

    %p
      %b Attendance percentage:
      = @member.attendance_percentage.round(2)

  - wishlist = @member.character_rewards.unobtained.by_cycle(@member.reward_cycle).includes(:reward).order(:preference)
  - unless wishlist.empty?
    .span5
      %b Wishlist
      %table.table.table-condensed#wishlist
        %tr
          %th #
          %th #{@config.rewards.singularize}
          %th Points
          - if @member.characters.many?
            %th Character
        - wishlist.each do |r|
          %tr
            %td #{r.preference}.
            %td= link_to r.reward.name, reward_path(r.reward)
            %td= r.current_points.round(2)
            - if @member.characters.many?
              %td= r.character.name

  #obtained_list
    - (1..@member.reward_cycle).each do |cycle|
      - cycle_list = @member.character_rewards.obtained.by_cycle(cycle).includes(:occurrence => :event).order(:preference)
      - unless cycle_list.empty?
        .span5
          %b #{@config.rewards.pluralize} Obtained Cycle #{cycle}
          %table.table.table-condensed
            %tr
              %th #
              %th #{@config.rewards.singularize}
              %th Date
              %th Points
              - if @member.characters.many?
                %th Character
            - cycle_list.each do |r|
              - if r.obtained
                %tr
                  %td= r.preference
                  %td= link_to r.reward.name, reward_path(r.reward)
                  %td= link_to r.occurrence.end_time.to_date, event_occurrence_path(r.occurrence.event, r.occurrence) unless r.occurrence.nil?
                  %td= r.obtained_points.round(2)
                  - if @member.characters.many?
                    %td= r.character.name

    - freelots = @member.character_rewards.free_lot.includes(:occurrence => :event)
    - unless freelots.empty?
      .span4
        %b Free lots
        %table.table.table-condensed
          %tr
            %th #{@config.rewards.singularize}
            %th Date
            - if @member.characters.many?
              %th Character
          - freelots.each do |r|
            - if r.obtained
              %tr
                %td= link_to r.reward.name, reward_path(r.reward)
                %td= link_to r.occurrence.end_time.to_date, event_occurrence_path(r.occurrence.event, r.occurrence) unless r.occurrence.nil?
                - if @member.characters.many?
                  %td= r.character.name

