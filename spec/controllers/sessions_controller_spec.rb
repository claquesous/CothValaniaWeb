require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe SessionsController do
  # This should return the minimal set of attributes required to create a valid
  # Session. As you add validations to Session, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {
      member: @member.name,
      password: @member.password
    }
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # SessionsController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  describe "GET new" do
    it "renders the new template" do
      get :new, {}, valid_session
      response.should render_template("new")
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new session" do
        @member = FactoryGirl.build(:member)
        Member.stub(:find_by_name).and_return(@member)
        @member.stub(:authenticate).and_return(true)
        post :create, {:session => valid_attributes}, valid_session
        session[:member_id].should eq(@member.id)
      end

      it "redirects to the home page" do
        @member = FactoryGirl.build(:member)
        Member.stub(:find_by_name).and_return(@member)
        @member.stub(:authenticate).and_return(true)
        post :create, {:params => valid_attributes}, valid_session
        response.should redirect_to(root_url)
      end
    end

    describe "with invalid member" do
      it "assigns a flash message" do
        # Trigger the behavior that occurs when invalid params are submitted
        Member.stub(:find_by_name).and_return(nil)
        post :create, {:session => {}}, valid_session
        flash[:warning].should eq("Invalid member or password")
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Member.stub(:find_by_name).and_return(nil)
        post :create, {:session => {}}, valid_session
        response.should render_template("new")
      end
    end

    describe "with invalid password" do
      it "assigns a flash message" do
        # Trigger the behavior that occurs when invalid params are submitted
        member = mock_model("Member")
        Member.stub(:find_by_name).and_return(member)
        member.stub(:authenticate).and_return(false)
        post :create, {:session => {}}, valid_session
        flash[:warning].should eq("Invalid member or password")
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        member = mock_model("Member")
        Member.stub(:find_by_name).and_return(member)
        member.stub(:authenticate).and_return(false)
        post :create, {:session => {}}, valid_session
        response.should render_template("new")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested session" do
      session[:member_id].should be_nil
      delete :destroy, {:id => session.to_param}, valid_session
    end

    it "redirects to the login" do
      delete :destroy, {:id => session.to_param}, valid_session
      response.should redirect_to(login_url)
    end
  end
end
