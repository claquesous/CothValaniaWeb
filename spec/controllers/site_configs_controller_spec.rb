require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe SiteConfigsController do

  # This should return the minimal set of attributes required to create a valid
  # SiteConfig. As you add validations to SiteConfig, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    { 
      site_name:  "Cvweb",
      password: "password",
      config_comment: "Nothing to see here!",
    }
  end

  def valid_member
    {
      name: "Cvweb",
      password: "password",
    }
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # SiteConfigsController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  before :each do
    controller.stub!(:check_config_and_login).and_return(:true)
    controller.stub!(:leader?).and_return(:true)
  end

  describe "GET index" do
    it "assigns all site_configs as @site_configs" do
      site_config = SiteConfig.create! valid_attributes
      get :index, {}, valid_session
      assigns(:site_configs).should eq([site_config])
    end
  end

  describe "GET show" do
    it "assigns the requested site_config as @site_config" do
      site_config = SiteConfig.create! valid_attributes
      get :show, {:id => site_config.to_param}, valid_session
      assigns(:site_config).should eq(site_config)
    end
  end

  describe "GET new" do
    it "redirects if a SiteConfig already exists" do
      SiteConfig.create! valid_attributes
      get :new, {}, valid_session
      response.should redirect_to(site_configs_path)
    end

    it "assigns a new site_config as @site_config" do
      get :new, {}, valid_session
      assigns(:site_config).should be_a_new(SiteConfig)
    end
  end

  describe "GET edit" do
    it "assigns the requested site_config as @site_config" do
      site_config = SiteConfig.create! valid_attributes
      get :edit, {:id => site_config.to_param}, valid_session
      assigns(:site_config).should eq(site_config)
    end
  end

  describe "POST create" do
    it "redirects if a SiteConfig already exists" do
      SiteConfig.create! valid_attributes
      post :create, {:site_config => valid_attributes, :member => valid_member}, valid_session
      response.should redirect_to(site_configs_path)
    end

    describe "with valid params" do
      it "creates a new SiteConfig" do
        expect {
          post :create, {:site_config => valid_attributes, :member => valid_member}, valid_session
        }.to change(SiteConfig, :count).by(1)
      end

      it "assigns a newly created site_config as @site_config" do
        post :create, {:site_config => valid_attributes, :member => valid_member}, valid_session
        assigns(:site_config).should be_a(SiteConfig)
        assigns(:site_config).should be_persisted
      end

      it "redirects to the created site_config" do
        post :create, {:site_config => valid_attributes, :member => valid_member}, valid_session
        response.should redirect_to(root_url)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved site_config as @site_config" do
        # Trigger the behavior that occurs when invalid params are submitted
        SiteConfig.any_instance.stub(:save).and_return(false)
        post :create, {:site_config => { "site_name" => "invalid value" }, member: { name: "invalid"}}, valid_session
        assigns(:site_config).should be_a_new(SiteConfig)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        SiteConfig.any_instance.stub(:save).and_return(false)
        post :create, {:site_config => { "site_name" => "invalid value" }, member: { name: "invalid"}}, valid_session
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "authentication" do
      it "should call authenticate" do
        site_config = SiteConfig.create! valid_attributes
        SiteConfig.any_instance.should_receive(:authenticate)
        put :update, {:id => site_config.to_param, :site_config => { "site_name" => "MyString" }}, valid_session
      end

      it "with invalid password re-renders the 'edit' template" do
        site_config = SiteConfig.create! valid_attributes
        # Trigger the behavior that occurs when invalid password is submitted
        SiteConfig.any_instance.stub(:authenticate).and_return(false)
        put :update, {:id => site_config.to_param, :site_config => { "site_name" => "invalid value" }}, valid_session
        response.should render_template("edit")
      end
    end

    describe "with valid params" do
      before :each do
        SiteConfig.any_instance.stub(:authenticate).and_return(true)
      end

      it "creates a new site_config" do
        site_config = SiteConfig.create! valid_attributes
        expect {
          put :update, {:id => site_config.to_param, :site_config => valid_attributes, site: {password: "any"} }, valid_session
        }.to change(SiteConfig, :count).by(1)
      end

      it "redirects to the site_configs index" do
        site_config = SiteConfig.create! valid_attributes
        put :update, {:id => site_config.to_param, :site_config => valid_attributes}, valid_session
        response.should redirect_to(site_configs_path)
      end
    end

    describe "with invalid params" do
      before :each do
        SiteConfig.any_instance.stub(:authenticate).and_return(true)
      end

      it "assigns the site_config as @site_config" do
        site_config = SiteConfig.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        SiteConfig.any_instance.stub(:save).and_return(false)
        put :update, {:id => site_config.to_param, :site_config => { "site_name" => "invalid value" }}, valid_session
        assigns(:site_config).should eq(site_config)
      end

      it "re-renders the 'edit' template" do
        site_config = SiteConfig.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        SiteConfig.any_instance.stub(:save).and_return(false)
        put :update, {:id => site_config.to_param, :site_config => { "site_name" => "invalid value" }}, valid_session
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested site_config" do
      site_config = SiteConfig.create! valid_attributes
      expect {
        delete :destroy, {:id => site_config.to_param}, valid_session
      }.to change(SiteConfig, :count).by(-1)
    end

    it "redirects to the site_configs list" do
      site_config = SiteConfig.create! valid_attributes
      delete :destroy, {:id => site_config.to_param}, valid_session
      response.should redirect_to(site_configs_url)
    end
  end

end
